;
; File generated by cc65 v 2.19 - Git 519a52d92
;
	.fopt		compiler,"cc65 v 2.19 - Git 519a52d92"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_recursiveFibo
	.export		_iterativeFibo
	.export		_reset
	.export		_do_logic
	.export		_fill_vram

; ---------------------------------------------------------------
; int __near__ recursiveFibo (int n)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_recursiveFibo: near

.segment	"CODE"

	jsr     pushax
	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	cmp     #$02
	txa
	sbc     #$00
	bvc     L0003
	eor     #$80
L0003:	bpl     L0002
	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	jmp     incsp2
L0002:	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	bne     L0005
	dex
L0005:	dea
	jsr     _recursiveFibo
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     #$02
	bcs     L0006
	dex
L0006:	jsr     _recursiveFibo
	jsr     tosaddax
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; short __near__ iterativeFibo (int n)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_iterativeFibo: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp8
	ldy     #$09
	lda     (sp),y
	tax
	cpx     #$80
	bcc     L000D
	ldx     #$FF
	txa
	jmp     L0001
L000D:	ldy     #$06
	lda     #$00
	sta     (sp),y
	iny
	sta     (sp),y
	ldy     #$04
	ina
	sta     (sp),y
	dea
	iny
	sta     (sp),y
	sta     (sp)
	ldy     #$01
	sta     (sp),y
L0003:	jsr     pushw0sp
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ina
	bne     L0007
	inx
L0007:	jsr     tosicmp
	bpl     L0004
	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	cmp     #$02
	txa
	sbc     #$00
	bvc     L0009
	eor     #$80
L0009:	bpl     L0008
	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	iny
	bra     L000B
L0008:	ldy     #$06
	lda     (sp),y
	ldy     #$04
	clc
	adc     (sp),y
	pha
	ldy     #$07
	lda     (sp),y
	ldy     #$05
	adc     (sp),y
	tax
	pla
	ldy     #$02
	jsr     staxysp
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$06
	jsr     staxysp
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$04
L000B:	jsr     staxysp
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	bra     L0003
L0004:	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
L0001:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ reset (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset: near

.segment	"CODE"

	ldx     #$02
	lda     #$00
	jsr     pushax
	jsr     decsp2
	lda     #$00
	sta     (sp)
	ldy     #$01
	sta     (sp),y
L0002:	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	cmp     #$0A
	txa
	sbc     #$00
	bvc     L0006
	eor     #$80
L0006:	bpl     L0003
	ldy     #$01
	lda     (sp),y
	sta     tmp1
	lda     (sp)
	asl     a
	rol     tmp1
	clc
	iny
	adc     (sp),y
	pha
	lda     tmp1
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _iterativeFibo
	ldy     #$00
	jsr     staxspidx
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	bra     L0002
L0003:	stp
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ do_logic (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_logic: near

.segment	"CODE"

	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fill_vram (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fill_vram: near

.segment	"CODE"

	rts

.endproc

